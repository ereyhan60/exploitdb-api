import pyxploitdb
import os
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from ollama import Client

load_dotenv()

OLLAMA_HOST = os.getenv("OLLAMA_HOST")
VALID_API_KEYS = os.getenv("VALID_API_KEYS").split(",")

app = Flask(__name__)
client = Client(host=OLLAMA_HOST)

def check_api_key(api_key):
    if "test" in VALID_API_KEYS: return True
    return api_key in VALID_API_KEYS

@app.route('/search', methods=['GET'])
def search():
    try:
        api_key = request.headers.get('X-API-KEY')
        if not check_api_key(api_key):
            return jsonify({'error': 'Invalid or missing API key'}), 401

        keyword = request.args.get('keyword')
        limit = request.args.get('limit')
        platform = request.args.get('platform')

        if not keyword:
            raise ValueError("No keyword provided")

        limit = int(limit) if limit else 20
        limit = 50 if not limit <= 50 else limit

        if not platform:
            platform = ""

        result = pyxploitdb.searchEDB(title=keyword, nb_results=limit, platform=platform)
        return jsonify(result)
    except ValueError as ve:
        return jsonify({'error': str(ve)}), 400
    except Exception as e:
        return jsonify({'error': 'An unexpected error occurred'}), 500


@app.route('/ask-ai', methods=['GET'])
def ask_ai():
        try:
            api_key = request.headers.get('X-API-KEY')
            if not check_api_key(api_key):
                return jsonify({'error': 'Invalid or missing API key'}), 401
            edb_id = request.args.get('edb_id')
            keyword = request.args.get('keyword')
            result = pyxploitdb.searchEDB(title=keyword)
            found_data = {}
            for k in result:
                if k.id == edb_id:
                    found_data = k
                    break
            result = jsonify(result)

            response = client.chat(model='dolphin-llama3', messages=[
                {
                    'role': 'user',
                    'content': f'{found_data}\n\nPlease explain, in simple terms suitable for a regular user, the steps to protect against this vulnerability. Give percentage about security against each vulnerability (0 is insecure, 100 is secure). Use third-person narrative. Minimum 400 words and maximum 600 words.'
                },
            ])
            print(response['message']['content'])
            return jsonify(response)
        except Exception as e:
            return jsonify({'error': 'An unexpected error occurred'}), 500

if __name__ == '__main__':
    app.run(debug=False)
